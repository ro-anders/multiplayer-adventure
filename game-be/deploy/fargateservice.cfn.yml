AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.
Parameters:
  ContainerPort:
    Type: Number
    Default: 4000
  # Subdomain:
  #   Type: String
  #   Default: h2hadv
  # HostedZoneName:
  #   Type: String
  #   Default: h2hatariadventure.com
  Image:
    Type: String
    # Update with the Docker image. "You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag)."
    # Default: 123456789012.dkr.ecr.region.amazonaws.com/image:tag
    Default: roanders/h2hadv-server:latest
  LoadBalancerPort:
    Type: Number
    Default: 4000
  ServiceName:
    Type: String
    # update with the name of the service
    Default: h2hadv-server
  SubnetA:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0d46ce42b6ae7a1ee
  SubnetB:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-011083badbc3f216e
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-0598605f272198f50
  HealthCheckPath:
    Type: String
    Default: /health
  Log:
    Type: String
    Default: "None"
    AllowedValues: ["None", "AWS"]

Conditions:
  LogToAWS:
    !Equals ["AWS", !Ref Log]


Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # # Send logs to CloudWatch Logs
          # LogConfiguration:
          #   LogDriver: awslogs
          #   Options:
          #     awslogs-region: !Ref AWS::Region
          #     awslogs-group: !Ref LogGroup
          #     awslogs-stream-prefix: ecs

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # Note: Add policies here if the service needs to access AWS Resources
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: "0.0.0.0/0"
          #SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    # DependsOn:
    #   - ListenerWeb
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      # Uncomment if using load balancer
      # # This may need to be adjusted if the container takes a while to start up
      # HealthCheckGracePeriodSeconds: 30
      # LoadBalancers:
      #   - ContainerName: !Ref ServiceName
      #     ContainerPort: !Ref ContainerPort
      #     TargetGroupArn: !Ref TargetGroup

  # Uncomment if using load balancer
  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: !Ref LoadBalancerPort
  #         ToPort: !Ref LoadBalancerPort
  #         CidrIp: 0.0.0.0/0
  #
  # TargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckIntervalSeconds: 10
  #     # will look for a 200 status code by default unless specified otherwise
  #     HealthCheckPath: !Ref HealthCheckPath
  #     HealthCheckTimeoutSeconds: 5
  #     UnhealthyThresholdCount: 2
  #     HealthyThresholdCount: 2
  #     Name: !Join ['', [!Ref ServiceName, TargetGroup]]
  #     Port: !Ref ContainerPort
  #     Protocol: HTTP
  #     TargetGroupAttributes:
  #       - Key: deregistration_delay.timeout_seconds
  #         Value: 60 # default is 300
  #     TargetType: ip
  #     VpcId: !Ref VPC
  #
  # ListenerWeb:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref TargetGroup
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: !Ref LoadBalancerPort
  #     Protocol: HTTP
  #
  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     LoadBalancerAttributes:
  #       # this is the default, but is specified here in case it needs to be changed
  #       - Key: idle_timeout.timeout_seconds
  #         Value: 60
  #     Name: !Join ['', [!Ref ServiceName, LB]]
  #     # "internal" is also an option
  #     Scheme: internet-facing
  #     SecurityGroups:
  #       - !Ref LoadBalancerSecurityGroup
  #     Subnets:
  #       - !Ref SubnetA
  #       - !Ref SubnetB

  # DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
  #     Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
  #     Type: A
  #     AliasTarget:
  #       DNSName: !GetAtt LoadBalancer.DNSName
  #       HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  # LogGroup:
  #   Condition: LogToAWS
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Join ['', [/service/, !Ref ServiceName]]

# Outputs:
  # Endpoint:
  #   Description: Static Endpoint
  #   Value: !Join ['', ['http://', !Ref DNSRecord]]

  # Uncomment if using load balancer
  # LBEndpoint:
  #   Description: Dynamic Endpoint
  #   Value: !Join ['', ['http://', !GetAtt LoadBalancer.DNSName]]