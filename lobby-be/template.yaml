# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  lobby-be

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  EnvironmentType:
    Description: Environment.  Either 'production' or 'development'
    Type: String

Globals:
    Function:
        Environment:
            Variables:
                ENVIRONMENT_TYPE: !Ref EnvironmentType
    Api:
        Cors:
            AllowMethods: "'GET,POST,PUT,OPTIONS'"
            AllowHeaders: "'Content-Type'"
            AllowOrigin: "'*'"
            # AllowCredentials: true  Uncomment only if you choose a specific origin instead of the * wildcard.
            
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-players.js
  getAllPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-players.getAllPlayersHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return a list of all registered players
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /player/
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-player.js
  putPlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-player.putPlayerHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Register a player is currently online
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /player/{name}
            Method: PUT
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # This is a Lambda function config associated with the source code: get-all-players.js
  getAllGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-games.getAllGamesHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return a list of all registered players
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /game/
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-player.js
  createGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-game.createGameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Register a game
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newgame
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # This is a Lambda function config associated with the source code: put-player.js
  putGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-game.putGameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Register a game
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /game/{session}
            Method: PUT
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  PlayersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Players
      PrimaryKey:
        Name: playername
        Type: String

  GamesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Games
      PrimaryKey:
        Name: session
        Type: Number

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
