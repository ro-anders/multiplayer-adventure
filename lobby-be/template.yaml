# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  lobby-be

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  EnvironmentType:
    Description: Environment.  Either 'production' or 'development'
    Type: String

  GMailPassword:
    Description: 'Password to the gmail account used to send notifications'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/passwords/h2hatariadventure-gmail' 

Globals:
    Function:
        Environment:
            Variables:
                ENVIRONMENT_TYPE: !Ref EnvironmentType
    Api:
        Cors:
            AllowMethods: "'GET,POST,PUT,OPTIONS,DELETE'"
            AllowHeaders: "'Content-Type'"
            AllowOrigin: "'*'"
            # AllowCredentials: true  Uncomment only if you choose a specific origin instead of the * wildcard.
            
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction


  ###########################
  # Lambdas for Player and Player Stats management
  #
  getAllPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-players.getAllPlayersHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return a list of all registered players
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /player/
            Method: GET

  getAllPlayerStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-playerstats.getAllPlayerStatsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return the stats of all registered players
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref PlayerStatsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /playerstats/
            Method: GET

  getPlayerStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-playerstats.getPlayerStatsByNameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get the stats on a single player
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref PlayerStatsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /playerstats/{playername}
            Method: GET

  putPlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-player.putPlayerHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Register a player is currently online
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /player/{name}
            Method: PUT

  putPlayerStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-playerstats.putPlayerStatsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Update a player's statistics
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayerStatsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /playerstats/{playername}
            Method: PUT

  ###########################
  # Lambdas for Chat management
  #

  createChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-chat.createChatHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Post a chat message
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newchat
            Method: POST

  ###########################
  # Lambdas for Game management
  #
  getAllGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-games.getAllGamesHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return a list of all games
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /game
            Method: GET

  getGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-game.getGameBySessionHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get info on a game
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /game/{session}
            Method: GET

  createGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-game.createGameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Register a game
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newgame
            Method: POST

  createGameServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-game-server.createGameServerHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Spawn a game server
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
        - EcsRunTaskPolicy:
            TaskDefinition: "h2hadv-serverTaskDefinition*"
        - Statement:
          - Sid: PassRolePolicy
            Effect: Allow
            Action:
            - "iam:PassRole"
            Resource:
            - "arn:aws:iam::637423607158:role/h2hadv*"

      Events:
        Api:
          Type: Api
          Properties:
            Path: /newgameserver
            Method: POST
      Environment:
        Variables:
          CUSTOM_DOMAIN_URL: !Sub CustomDomainUrl

  putGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-game.putGameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Update an existing game
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /game/{session}
            Method: PUT

  deleteGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-game.deleteGameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete a game
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /game/{session}
            Method: DELETE

  ###########################
  # Lambdas for Scheduled Event management
  #
  getAllEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-events.getAllScheduledEventsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return a list of all future scheduled events
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref ScheduledEventsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /event
            Method: GET

  createEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-event.upsertScheduledEventHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Register a scheduled event
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduledEventsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /event
            Method: PUT

  deleteEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-event.deleteScheduledEventHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete a scheduled event
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduledEventsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /event/{starttime}
            Method: DELETE

  ###########################
  # Convenience method for getting all player, game and chat updates
  #
  getLobbyState:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-lobby-state.getLobbyStateHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get current users, games, and latest chat
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref ChatTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /lobby
            Method: GET

  ###########################
  # Lambdas for Subscriptions
  #

  putSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-subscription.putSubscriptionHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Update or create an existing subscription
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /subscription/{address}
            Method: PUT

  deleteSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-subscription.deleteSubscriptionHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete a subscription
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /subscription/{address}
            Method: DELETE

  createNotificationEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-notification-event.createNotificationEventHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Notify all people subscribed to an event
      Policies:
      Environment:
        Variables:
          GMAIL_PASSWORD: !Ref GMailPassword
      Events:
        Api:
          Type: Api
          Properties:
            Path: /notify
            Method: POST

  ###########################
  # Lambdas for Settings management
  #
  getSettingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-setting.getSettingByNameHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get a configuration setting
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBReadPolicy:
            TableName: !Ref SettingsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /setting/{setting_name}
            Method: GET
  
  putSettingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-setting.putSettingHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Set a configuration setting
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /setting/{setting_name}
            Method: PUT

  deleteSettingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-setting.deleteSettingHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete a configuration setting
      Policies:
        # Give Create/Read/Update/Delete Permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /setting/{setting_name}
            Method: DELETE


  # Players table
  #  Table of recent players and when they played.  Players that haven't played recently 
  #  are deleted from this table.  More permanent and more detailed info on players is kept
  #  in a different table, the PlayerStats table.
  #
  #  playername (partition key): string - username of the player
  #  lastactive: number - timestamp of last time they were in the lobby or playing the game
  #  ttl: number - timestamp at which this player can be removed from this table
  #
  PlayersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Players
      PrimaryKey:
        Name: playername
        Type: String

  # Player Stats table
  #  Table of players and statistics about their playing.
  #
  #  playername (partition key): string - username of the player
  #  games: number - the number of games this player has played
  #  wins: number - the number of games this player has won
  #  achvmts: number - how many steps has player taken to achieving easter egg
  #  achvmt_time: number - time that they last gained a new achievment
  #
  PlayerStatsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: PlayerStats
      PrimaryKey:
        Name: playername
        Type: String

  # Games table
  #  Table of proposed and active games.  Past games are deleted from this table.
  #
  #  session (partition key): string - unique key assigned to the game
  #  game_number: number - 0,1,2 indicating whether Game 1, 2 or 3
  #  number_players: number - 2, 2.5, or 3 indicating whether to have exactly 2 players, 2 or 3, or exactly 3
  #  fast_dragons: boolean - whether dragons are fast or slow
  #  fearful_dragons: boolean - whether dragons frun from sword
  #  player_names: string[] - array of player names
  #  
  GamesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Games
      PrimaryKey:
        Name: session
        Type: Number

  # Scheduled Events table
  #  Table of scheduled events (times people have said they will come online to play)
  #  
  #  partitionkey (partition key): string - just the string "EVENT"
  #  starttime (partition key): number - time when the event will start
  #  notes: string - a short, optional description of the event
  #  players: string[] - those who said they will join at the time 
  #     (the first one is the planner)
  #  
  ScheduledEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ScheduledEvents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "partitionkey"
          AttributeType: "S"
        - AttributeName: "starttime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "partitionkey"
          KeyType: "HASH"
        - AttributeName: "starttime"
          KeyType: "RANGE"

  # Chat table
  #  Table of chat messages sent in the lobby.
  #
  #  partitionkey (partition key): string - just the string "CHAT"
  #  sortkey (sortkey) : string - concatenation of timestamp and player_name
  #  timestamp: number - timestamp of when the message was sent
  #  player_name: string - the name of player
  #  message: string - the message the player posted
  #  
  ChatTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Chat
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "partitionkey"
          AttributeType: "S"
        - AttributeName: "sortkey"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "partitionkey"
          KeyType: "HASH"
        - AttributeName: "sortkey"
          KeyType: "RANGE"

  # Subscriptions table
  #  Table of email address (and possibly mobile numbers) to notify
  #  as well as for what situations they want to be notified
  #
  #  address (partition key): string - email address (or possibly mobile number if we ever
  #           support texting people)
  #  on_send_call: boolean - whether to notify this person when someone sends out a call
  #  on_new_event: boolean - whether to notify this person when a new event is scheduled
  #  
  SubscriptionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Subscriptions
      PrimaryKey:
        Name: address
        Type: String

  # Settings table
  #  Table of name value settings of the system.  At time of creation "game_server_ip" is the only
  #  setting
  #
  #  setting_name (partition key): string
  #  setting_value: string
  #  time_set: number - the timestamp of when this setting was last changed
  #
  SettingsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Settings
      PrimaryKey:
        Name: setting_name
        Type: String

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
